IM_seq = {};
SE_seq = {};
IM_seq{1} = {'./data/MainFrame_1.png',...
'./data/MainFrame_2.png',...
'./data/MainFrame_3.png',...
'./data/MainFrame_4.png',...
'./data/MainFrame_5.png',...
'./data/MainFrame_6.png',...
'./data/MainFrame_7.png',...
'./data/MainFrame_8.png',...
'./data/MainFrame_9.png',...
'./data/MainFrame_10.png',...
'./data/MainFrame_11.png',...
'./data/MainFrame_12.png',...
'./data/MainFrame_13.png',...
'./data/MainFrame_14.png',...
'./data/MainFrame_23.png',...
'./data/MainFrame_24.png',...
'./data/MainFrame_25.png',...
'./data/MainFrame_26.png',...
'./data/MainFrame_27.png',...
'./data/MainFrame_28.png',...
'./data/MainFrame_29.png'};
IM_seq{2,:} = {'./data/S2/S2_MainFrame_1.png',...
'./data/S2/S2_MainFrame_2.png',...
'./data/S2/S2_MainFrame_3.png',...
'./data/S2/S2_MainFrame_4.png',...
'./data/S2/S2_MainFrame_5.png',...
'./data/S2/S2_MainFrame_6.png',...
'./data/S2/S2_MainFrame_7.png',...
'./data/S2/S2_MainFrame_8.png',...
'./data/S2/S2_MainFrame_9.png',...
'./data/S2/S2_MainFrame_10.png',...
'./data/S2/S2_MainFrame_11.png',...
'./data/S2/S2_MainFrame_12.png',...
'./data/S2/S2_MainFrame_13.png',...
'./data/S2/S2_MainFrame_14.png',...
'./data/S2/S2_MainFrame_23.png',...
'./data/S2/S2_MainFrame_24.png',...
'./data/S2/S2_MainFrame_25.png',...
'./data/S2/S2_MainFrame_26.png',...
'./data/S2/S2_MainFrame_27.png',...
'./data/S2/S2_MainFrame_28.png',...
'./data/S2/S2_MainFrame_29.png'};
IM_seq{3,:} = {'./data/S3/S3_MainFrame_1.png',...
'./data/S3/S3_MainFrame_2.png',...
'./data/S3/S3_MainFrame_3.png',...
'./data/S3/S3_MainFrame_4.png',...
'./data/S3/S3_MainFrame_5.png',...
'./data/S3/S3_MainFrame_6.png',...
'./data/S3/S3_MainFrame_7.png',...
'./data/S3/S3_MainFrame_8.png',...
'./data/S3/S3_MainFrame_9.png',...
'./data/S3/S3_MainFrame_10.png',...
'./data/S3/S3_MainFrame_11.png',...
'./data/S3/S3_MainFrame_12.png',...
'./data/S3/S3_MainFrame_13.png',...
'./data/S3/S3_MainFrame_14.png',...
'./data/S3/S3_MainFrame_23.png',...
'./data/S3/S3_MainFrame_24.png',...
'./data/S3/S3_MainFrame_25.png',...
'./data/S3/S3_MainFrame_26.png',...
'./data/S3/S3_MainFrame_27.png',...
'./data/S3/S3_MainFrame_28.png',...
'./data/S3/S3_MainFrame_29.png'};
SE_seq{1} = {'./data/Segmentation_1.png',...
'./data/Segmentation_2.png',...
'./data/Segmentation_3.png',...
'./data/Segmentation_4.png',...
'./data/Segmentation_5.png',...
'./data/Segmentation_6.png',...
'./data/Segmentation_7.png',...
'./data/Segmentation_8.png',...
'./data/Segmentation_9.png',...
'./data/Segmentation_10.png',...
'./data/Segmentation_11.png',...
'./data/Segmentation_12.png',...
'./data/Segmentation_13.png',...
'./data/Segmentation_14.png',...
'./data/Segmentation_23.png',...
'./data/Segmentation_24.png',...
'./data/Segmentation_25.png',...
'./data/Segmentation_26.png',...
'./data/Segmentation_27.png',...
'./data/Segmentation_28.png',...
'./data/Segmentation_29.png'};
SE_seq{2,:} = {'./data/S2/S2_Segmentation_1.png',...
'./data/S2/S2_Segmentation_2.png',...
'./data/S2/S2_Segmentation_3.png',...
'./data/S2/S2_Segmentation_4.png',...
'./data/S2/S2_Segmentation_5.png',...
'./data/S2/S2_Segmentation_6.png',...
'./data/S2/S2_Segmentation_7.png',...
'./data/S2/S2_Segmentation_8.png',...
'./data/S2/S2_Segmentation_9.png',...
'./data/S2/S2_Segmentation_10.png',...
'./data/S2/S2_Segmentation_11.png',...
'./data/S2/S2_Segmentation_12.png',...
'./data/S2/S2_Segmentation_13.png',...
'./data/S2/S2_Segmentation_14.png',...
'./data/S2/S2_Segmentation_23.png',...
'./data/S2/S2_Segmentation_24.png',...
'./data/S2/S2_Segmentation_25.png',...
'./data/S2/S2_Segmentation_26.png',...
'./data/S2/S2_Segmentation_27.png',...
'./data/S2/S2_Segmentation_28.png',...
'./data/S2/S2_Segmentation_29.png'};
SE_seq{3,:} = {'./data/S3/S3_Segmentation_1.png',...
'./data/S3/S3_Segmentation_2.png',...
'./data/S3/S3_Segmentation_3.png',...
'./data/S3/S3_Segmentation_4.png',...
'./data/S3/S3_Segmentation_5.png',...
'./data/S3/S3_Segmentation_6.png',...
'./data/S3/S3_Segmentation_7.png',...
'./data/S3/S3_Segmentation_8.png',...
'./data/S3/S3_Segmentation_9.png',...
'./data/S3/S3_Segmentation_10.png',...
'./data/S3/S3_Segmentation_11.png',...
'./data/S3/S3_Segmentation_12.png',...
'./data/S3/S3_Segmentation_13.png',...
'./data/S3/S3_Segmentation_14.png',...
'./data/S3/S3_Segmentation_23.png',...
'./data/S3/S3_Segmentation_24.png',...
'./data/S3/S3_Segmentation_25.png',...
'./data/S3/S3_Segmentation_26.png',...
'./data/S3/S3_Segmentation_27.png',...
'./data/S3/S3_Segmentation_28.png',...
'./data/S3/S3_Segmentation_29.png'};

% some checks
if (numel(unique(cellfun(@length,IM_seq))) ~= 1) | (numel(unique(cellfun(@length,SE_seq))) ~= 1)
  error("All image sequence must have equal length.");
end

if unique(cellfun(@length,IM_seq)) ~= unique(cellfun(@length,SE_seq))
  error("Number of frames/poses and segmentation maps must be equal.")
end

% load frames and segmentation map
IM = {};
SE = {};
for iFR = 1:unique(cellfun(@length,IM_seq))
  for iIM = 1:size(IM_seq,1)
    % First index for number of skin images, second index number of poses/frames
    IM{iIM,iFR} = imread(IM_seq{iIM}{iFR});
    SE{iIM,iFR} = imread(SE_seq{iIM}{iFR});
  end
end

segmentationcolors = [255 0 0; 0 255 0; 0 0 255; 0 0 0; 255 255 0; 0 255 255; 255 255 255; 128 128 128];
segmentationnames = {'Hair'; 'Skin'; 'Eyes'; 'Torso'; 'Arms'; 'Belt'; 'Pants'; 'Shoes'};
h.segmentationnames = segmentationnames;
h.segmentationcolors = segmentationcolors;

% some helper functions needed
% load sequence of frames and segmentation maps
function load_sequence(obj, init=false);
  h = guidata (obj);
  IM = {};
  SE = {};
  cSkins = str2num(get(h.BOL, "string")); 
  if isempty(cSkins) || (numel(cSkins) ~= 1) || ~isnumeric(cSkins)
    warning("Invalid number of skins. Must be a single integer.");
    return;
  end
  for iSkins = 1:cSkins
    [fname_frame, fpath_frame, fltidx_frame] = uigetfile ({"*.png", "Frames in png format"},["Load frames of skin ",num2str(iSkins)], "*.png", "Multiselect", "on");
    [fname_seg, fpath_seg, fltidx_seg] = uigetfile ({"*.png", "Segmentations in png format"},["Load Segmentation Maps of skin ",num2str(iSkins)], "*.png", "Multiselect", "on");
    % read frames
    if ~isnumeric(fname_frame)
      if iscell(fname_frame)
        for iIM = 1:numel(fname_frame)
          IM{iSkins, iIM} = imread(fullfile(fpath_frame,fname_frame{iIM}));
        end
      else
        IM{iSkins, 1} = imread(fullfile(fpath_fname,fname_frame));
      end
    else
      warning("No frames selected.")
      return;
    end
    % read segmentation maps
    if ~isnumeric(fname_seg)
      if iscell(fname_seg)
        for iSE = 1:numel(fname_seg)
          SE{iSkins, iSE} = imread(fullfile(fpath_seg,fname_seg{iSE}));
        end
      else
        SE{iSkins, 1} = imread(fullfile(fpath_seg,fname_seg));
      end
    else
      warning("No segmentation maps selected.")
      return;
    end
    % check that number of images is equal to number of frame and all have equal size
    if numel(IM) ~= numel(SE)
      warning("Number of frames and segmentation maps must be equal.");
      return;
    end
    % Add images and segmentation maps to guidata
    h.IM = IM;
    h.SE = SE;
    % update required GUI elements with number of skins
    set(h.PS, "string", arrayfun(@num2str,1:size(IM,2),'UniformOutput',false));
    set(h.PS, "value", 1);
    for iMasks = 1:numel(h.segmentationnames)
      set( h.(['p',num2str(iMasks)]), "string", arrayfun(@num2str,1:cSkins,'UniformOutput',false) ); 
      set( h.(['p',num2str(iMasks)]), 'value', 1); 
    end
    guidata(obj, h);
    update_pose(obj, true);
  end
end

% load sequence of frames and segmentation maps
function export_all_frames(obj, init=false);
  h = guidata (obj);
  current_frame = get(h.PS, "value");
  for iIM = 1:size(h.IM,2)
    set(h.PS, "value", iIM);
    update_pose(obj, true);
    drawnow;
    h = guidata (obj);
    CData = get(h.hIM, 'CData');
    imwrite(CData, [get(h.EED, "string"), num2str(iIM), '.png']);
    CData_seg = get(h.hSE, 'CData');
    imwrite(CData_seg, [get(h.EES, "string"), num2str(iIM), '.png']);
  end
  set(h.PS, "value", current_frame);
  guidata(obj, h);
  update_pose(obj, true);
end

% update pose and segmentation map
function update_pose(obj, init=false);
  % get current frame/pose
  h = guidata (obj);
  iPose = get(h.PS, "value");
  % get all individual segmantation maps per segment
  segmentationmaps = [];
  for iMap = 1:numel(h.segmentationnames)
     segmentationmaps(iMap) = get (h.(['p',num2str(iMap)]), "value");
  end
  [IMcomp, SEcomp] = compose_image(h.IM(:,iPose), h.SE(:,iPose), h.segmentationcolors, segmentationmaps);
  set(h.hIM, 'CData', uint8(IMcomp));
  set(h.hSE, 'CData', uint8(SEcomp));
end

% compose image from input of frames and segmentation maps
function [IMcomp, SEcomp] = compose_image(IMin, SEin, segmentcolors, segmentindex)
  % IMin: a cell array of input images
  % SEin: a cell array of segmentation maps
  % segmentcolors: an array of corresponding segmentation colors
  % segmentindex: an array of which map to pick per segmentcolor
  % IMout: the composed image
  % SEout: the composed segmentation map
  
  % initialise variable for composed image/map
  IMcomp = ones(size(IMin{1}))*255;
  SEcomp = ones(size(SEin{1}))*255;
  IMcomp(:,:,2) = 0; % set to magenta (255,0,255)
  SEcomp(:,:,2) = 0; % set to magenta (255,0,255)
  for iSeg = 1:numel(segmentindex)
    mask_out = CreateMasks(SEin{segmentindex(iSeg)}, segmentcolors(iSeg,:));
    IMcomp(mask_out{1}) = IMin{segmentindex(iSeg)}(mask_out{1});
    SEcomp(mask_out{1}) = SEin{segmentindex(iSeg)}(mask_out{1});
  end
end

% create segmentation marks from pre-defined segmentation colors
function masks_out = CreateMasks(IMseg, segmentationcolors)
  masks_out = {};
  for iPart = 1:size(segmentationcolors,1)
	  mask_tmp = (IMseg(:,:,1) == segmentationcolors(iPart,1)) & (IMseg(:,:,2) == segmentationcolors(iPart,2)) & (IMseg(:,:,3) == segmentationcolors(iPart,3));
	  masks_out{end+1} = repmat(mask_tmp,[1 1 3]);
  end
end

% UI elements we need:
% Load frames/poses/segmentations/sequences
% Edit field to specify number of poses
% The composed image
% The composed segmentation map
% Selection element per segment (popupmenu with all poses)

% draw the GUI
hf = figure('Position',[300 200 1000 600]);
% draw frame
axIM = axes('units', 'normalized', 'Position',[0.1 0.0 .4 1.0]);
h.IM = IM;
h.hIM = image(IM{1,1});
axis image;
axis off;
% draw segmentation map
axSE = axes('units', 'normalized', 'Position',[0.45 0.0 .4 1.0]);
h.SE = SE;
h.hSE = image(SE{1,1});
axis image;
axis off;
p = uipanel ("title", "Map selection", "position", [.81 .01 .18 .97]);

pos_top = .93;
pos_step = .108;
for iMasks = 1:numel(segmentationnames)
  h.(['t',num2str(iMasks)]) = uicontrol ("parent", p, "style", "text", "string", segmentationnames{iMasks}, 'units', 'normalized', "position",[.1 pos_top-(iMasks-1)*pos_step .3 .05]);
  h.(['p',num2str(iMasks)]) = uicontrol ("parent", p, "style", "popupmenu", "string", arrayfun(@num2str,1:size(IM,1),'UniformOutput',false), 'value', 1, 'units', 'normalized',  "position", [.4 pos_top-(iMasks-1)*pos_step .3 .05], "callback", @update_pose);
end

% add open sequence button
h.BO = uicontrol("style", "pushbutton", "string", "Open sequence", 'units', 'normalized', "position",[.005 .95 .12 .04], "callback", @load_sequence); 
h.NL = uicontrol("style", "text", "string", "No. of skins:", 'units', 'normalized', "position",[.006 .9 .10 .04]);
h.BOL = uicontrol("style", "edit", "string", "3", 'units', 'normalized', "position",[.11 .9 .03 .04]);

% add selection of frame/pose
h.LF = uicontrol("style", "text", "string", "Frame:", 'units', 'normalized', "position",[.003 .80 .08 .04]); 
h.PS = uicontrol("style", "popupmenu", "string", arrayfun(@num2str,1:size(IM,2),'UniformOutput',false), 'value', 1, 'units', 'normalized', "position",[.005 .75 .10 .05], "callback", @update_pose); 

% export frames
h.ESBT = uicontrol("style", "pushbutton", "string", {'Save all'}, 'units', 'normalized', "position",[.005 .67 .12 .06], "callback", @export_all_frames);
h.EED = uicontrol("style", "edit", "string", "Frame_edit_", 'units', 'normalized', "position",[.005 .63 .12 .04]);
h.EES = uicontrol("style", "edit", "string", "Seg_edit_", 'units', 'normalized', "position",[.005 .59 .12 .04]);

guidata(hf, h);
update_pose(hf, true);